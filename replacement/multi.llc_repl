#include <iostream>
#include "cache.h"
#include "cache_repl_base.h"
#include "hawkeye.h"
#include "hawkeye_crc2.h"
#include "mp3b.h"
#include "ship.h"
#include "lru.h"

namespace knob
{
    extern string llc_replacement_type;
}

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    if(!knob::llc_replacement_type.compare("hawkeye"))
    {
        cout << "Adding LLC replacement type: Hawkeye" << endl;
        llc_repl = (HawkeyeRepl*) new HawkeyeRepl(knob::llc_replacement_type);
        llc_repl->initialize_replacement();
    }
    else if(!knob::llc_replacement_type.compare("hawkeye_crc2"))
    {
        cout << "Adding LLC replacement type: HawkeyeCRC2" << endl;
        llc_repl = (HawkeyeCRC2Repl*) new HawkeyeCRC2Repl(knob::llc_replacement_type);
        llc_repl->initialize_replacement();
    }
    else if(!knob::llc_replacement_type.compare("mp3b"))
    {
        cout << "Adding LLC replacement type: MP3B" << endl;
        llc_repl = (MP3BRepl*) new MP3BRepl(knob::llc_replacement_type);
        llc_repl->initialize_replacement();
    }
    else if(!knob::llc_replacement_type.compare("ship"))
    {
        cout << "Adding LLC replacement type: SHiP" << endl;
        llc_repl = (SHiPRepl*) new SHiPRepl(knob::llc_replacement_type);
        llc_repl->initialize_replacement();
    }
    else if(!knob::llc_replacement_type.compare("lru"))
    {
        cout << "Adding LLC replacement type: LRU" << endl;
        llc_repl = (LRURepl*) new LRURepl(knob::llc_replacement_type, this);
        llc_repl->initialize_replacement();
    }
}

// print config
void CACHE::llc_replacement_print_config()
{
    llc_repl->print_config();
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    llc_repl->update_replacement_state(cpu, set, way, full_addr, ip, victim_addr, type, hit);
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    return llc_repl->find_victim(cpu, instr_id, set, current_set, ip, full_addr, type);
}

// dump stats
void CACHE::llc_replacement_final_stats()
{
    llc_repl->dump_stats();
}
