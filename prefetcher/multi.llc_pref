#include <string>
#include <assert.h>
#include "ooo_cpu.h"
#include "cache.h"
#include "prefetcher.h"

/* Supported prefetchers at LLC */
#include "sms.h"
#include "next_line.h"
#include "bop.h"
#include "mlop.h"
#include "bingo.h"
#include "stride.h"
#include "ampm.h"
#include "streamer.h"

using namespace std;

namespace knob
{
	extern vector<string> llc_prefetcher_types;
}

void CACHE::llc_prefetcher_initialize()
{
	for(uint32_t index = 0; index < knob::llc_prefetcher_types.size(); ++index)
	{
		if(!knob::llc_prefetcher_types[index].compare("none"))
		{
			cout << "adding LLC_PREFETCHER: NONE" << endl;
		}
		else if(!knob::llc_prefetcher_types[index].compare("sms"))
		{
			cout << "adding LLC_PREFETCHER: SMS" << endl;
			SMSPrefetcher *pref_sms = new SMSPrefetcher(knob::llc_prefetcher_types[index]);
			llc_prefetchers.push_back(pref_sms);
		}
		else if(!knob::llc_prefetcher_types[index].compare("bop"))
		{
			cout << "adding LLC_PREFETCHER: BOP" << endl;
			BOPrefetcher *pref_bop = new BOPrefetcher(knob::llc_prefetcher_types[index]);
			llc_prefetchers.push_back(pref_bop);
		}
		else if(!knob::llc_prefetcher_types[index].compare("next_line"))
		{
			cout << "adding LLC_PREFETCHER: next_line" << endl;
			NextLinePrefetcher *pref_nl = new NextLinePrefetcher(knob::llc_prefetcher_types[index]);
			llc_prefetchers.push_back(pref_nl);
		}
		else if(!knob::llc_prefetcher_types[index].compare("mlop"))
		{
			cout << "adding LLC_PREFETCHER: MLOP" << endl;
			MLOP *pref_mlop = new MLOP(knob::llc_prefetcher_types[index], this);
			llc_prefetchers.push_back(pref_mlop);
		}
		else if(!knob::llc_prefetcher_types[index].compare("bingo"))
		{
			cout << "adding LLC_PREFETCHER: Bingo" << endl;
			Bingo *pref_bingo = new Bingo(knob::llc_prefetcher_types[index], this);
			llc_prefetchers.push_back(pref_bingo);
		}
		else if(!knob::llc_prefetcher_types[index].compare("stride"))
		{
			cout << "adding LLC_PREFETCHER: Stride" << endl;
			StridePrefetcher *pref_stride = new StridePrefetcher(knob::llc_prefetcher_types[index]);
			llc_prefetchers.push_back(pref_stride);
		}
		else if (!knob::llc_prefetcher_types[index].compare("streamer"))
		{
			cout << "adding LLC_PREFETCHER: streamer" << endl;
			Streamer *pref_streamer = new Streamer(knob::llc_prefetcher_types[index]);
			llc_prefetchers.push_back(pref_streamer);
		}
		else if (!knob::llc_prefetcher_types[index].compare("ampm"))
		{
			cout << "adding LLC_PREFETCHER: AMPM" << endl;
			AMPM *pref_ampm = new AMPM(knob::llc_prefetcher_types[index]);
			llc_prefetchers.push_back(pref_ampm);
		}
		else
		{
			cout << "unsupported prefetcher type " << knob::llc_prefetcher_types[index] << endl;
			exit(1);
		}
	}

	assert(knob::llc_prefetcher_types.size() == llc_prefetchers.size() || !knob::llc_prefetcher_types[0].compare("none"));
}

uint32_t CACHE::llc_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
	// check if data prefetcher is forcefully disabled by DDRP monitor
	if(ooo_cpu[cpu].ddrp_monitor && ooo_cpu[cpu].ddrp_monitor->disable_data_prefetcher)
	{
		return metadata_in;	
	}

	vector<uint64_t> pref_addr;
	for(uint32_t index = 0; index < llc_prefetchers.size(); ++index)
	{
		llc_prefetchers[index]->invoke_prefetcher(ip, addr, cache_hit, type, pref_addr);
		
        if(knob::llc_prefetcher_types[index].compare("mlop")
			&& knob::llc_prefetcher_types[index].compare("bingo")
			&& !pref_addr.empty())
		{
			for(uint32_t addr_index = 0; addr_index < pref_addr.size(); ++addr_index)
			{
				prefetch_line(ip, addr, pref_addr[addr_index], FILL_LLC, 0);
			}
		}
		pref_addr.clear();
	}

	return metadata_in;
}

uint32_t CACHE::llc_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
	// check if data prefetcher is forcefully disabled by DDRP monitor
	if(ooo_cpu[cpu].ddrp_monitor && ooo_cpu[cpu].ddrp_monitor->disable_data_prefetcher)
	{
		return metadata_in;	
	}

	if(prefetch)
	{
		for(uint32_t index = 0; index < llc_prefetchers.size(); ++index)
		{
			if(!llc_prefetchers[index]->get_type().compare("next_line"))
			{
				NextLinePrefetcher *pref_nl = (NextLinePrefetcher*)llc_prefetchers[index];
				pref_nl->register_fill(addr);
			}
			if(!llc_prefetchers[index]->get_type().compare("bop"))
			{
				BOPrefetcher *pref_bop = (BOPrefetcher*)llc_prefetchers[index];
				pref_bop->register_fill(addr);
			}
			if(!llc_prefetchers[index]->get_type().compare("mlop"))
			{
				MLOP *pref_mlop = (MLOP*)llc_prefetchers[index];
				pref_mlop->register_fill(addr, set, way, prefetch, evicted_addr);
			}
			if(!llc_prefetchers[index]->get_type().compare("bingo"))
			{
				Bingo *pref_bingo = (Bingo*)llc_prefetchers[index];
				pref_bingo->register_fill(addr, set, way, prefetch, evicted_addr);
			}
		}
	}

	return metadata_in;
}

uint32_t CACHE::llc_prefetcher_prefetch_hit(uint64_t addr, uint64_t ip, uint32_t metadata_in)
{
	// check if data prefetcher is forcefully disabled by DDRP monitor
	if(ooo_cpu[cpu].ddrp_monitor && ooo_cpu[cpu].ddrp_monitor->disable_data_prefetcher)
	{
		return metadata_in;	
	}

	// for(uint32_t index = 0; index < llc_prefetchers.size(); ++index)
	// {
	// 	if(!llc_prefetchers[index]->get_type().compare("scooby"))
	// 	{
	// 		Scooby *pref_scooby = (Scooby*)llc_prefetchers[index];
	// 		pref_scooby->register_prefetch_hit(addr);
	// 	}
	// }

    return metadata_in;
}

void CACHE::llc_prefetcher_final_stats()
{
	for(uint32_t index = 0; index < llc_prefetchers.size(); ++index)
	{
		llc_prefetchers[index]->dump_stats();
	}
}

void CACHE::llc_prefetcher_print_config()
{
	for(uint32_t index = 0; index < llc_prefetchers.size(); ++index)
	{
		llc_prefetchers[index]->print_config();
	}
}

void CACHE::llc_prefetcher_broadcast_bw(uint8_t bw_level)
{
	// for(uint32_t index = 0; index < llc_prefetchers.size(); ++index)
	// {
	// 	if(!llc_prefetchers[index]->get_type().compare("scooby"))
	// 	{
	// 		Scooby *pref_scooby = (Scooby*)llc_prefetchers[index];
	// 		pref_scooby->update_bw(bw_level);
	// 	}
	// 	if(!llc_prefetchers[index]->get_type().compare("dspatch"))
	// 	{
	// 		DSPatch *pref_dspatch = (DSPatch*)llc_prefetchers[index];
	// 		pref_dspatch->update_bw(bw_level);
	// 	}
	// }
}

void CACHE::llc_prefetcher_broadcast_ipc(uint8_t ipc)
{
	// for(uint32_t index = 0; index < llc_prefetchers.size(); ++index)
	// {
	// 	if(!llc_prefetchers[index]->get_type().compare("scooby"))
	// 	{
	// 		Scooby *pref_scooby = (Scooby*)llc_prefetchers[index];
	// 		pref_scooby->update_ipc(ipc);
	// 	}
	// }
}

void CACHE::llc_prefetcher_broadcast_acc(uint32_t acc_level)
{
	// for(uint32_t index = 0; index < llc_prefetchers.size(); ++index)
	// {
	// 	if(!llc_prefetchers[index]->get_type().compare("scooby"))
	// 	{
	// 		Scooby *pref_scooby = (Scooby*)llc_prefetchers[index];
	// 		pref_scooby->update_acc(acc_level);
	// 	}
	// }
}
